		Linux
-man/info/ih/--help	<- gives help to code entered
compgen -c 		<- gives all commands available to use

	Structure
$ 		ls 		-l 		--color 	-- 		/home/name 	<cr>
shell prompt	command		short option	long option	end marker	file path	end of command

	Command
ls 	<- get content in directory
echo	<- get what the file is
version=$(uname -r) <- assign value to "version" with command "uname"
'	<- disable reconigsion for special character
" 	<- protect special character
\	<- escape charcter
pws	<- print working directory
;	<- allows multi command in 1 command


	Short Options(does not runs with Long option)
-a	<- list all
-l	<- long (more detail)
-r	<- reverse order
-t	<- time
*	<- zero or more characters
?	<- exactly 1 character
[abc]	<- single character within(a,b,c)
[A-Z]	<- single character within range
[!abc]	<- single character that is not (a,b,c)
~	<- user's home directory


	Long Options(does not run with Short option)
[[:upper:]]*	<- all upper case characters
[[:lower:]]*	<- all lower case characters
[[:digit:]]*	<- all digits

	File System
(/.filename) <- will hide the file from ls search
~cd	<- change directory
./	<- this directory
../	<- parent directory

		Permissions
			structure
d 		rwx 	rwx 	rwx
directory	owner	group	others

-	<- it is a file
d	<- it is  directory
l	<- link

r	<- read
w	<- write
x	<- execute

	Links
$stat	<- gives all information of a file

		Structure
ln 	-s 			source 			target
link	symbolic or not		source of file		name of file

ln	<- link
-i	<- get i-node number
-s	<- make it symbolic link
-ilL	<- get the information of the symbolic linked file

		Moving file
mv	<- move or rename file
-i	<- interactive checking
-f	<- force it no matter

		Remove file
rm 	<- remove file
-i	<- interactive check
-r	<- repeat for all lower directory
-f	<- force no matter

		Directory command
mkdir [-pm] directoryname	<- make directory with parent directory	and mode
-p	<- parent directory	
-m 	<- set the mode
	
rmdir				<- remove directory
rm -r directoryname		<- delete all content in this directory
cp				<- copy directory

	Variable/Function/
export		<- allows to be seen by others in the program
set		<- display all variables
env		<- display exported variables
unset		<- delete variables
PATH		<- gets all file paths
type file name	<- gives path of where the file is

		set options
set -o	<- list all options
-o	<- turn option on
+o	<- turn option off

	Fact finding
ps[option] 	<- display all the processes
date [+format]	<- display current date time
uname[option]	<- display basic OS & platform info
who/w		<- list users logged onto the system
cat		<- read file/script
grep condition	<- select all lines/file that matches the condition word
wc -l		<- count the lines in the file
tail		<- display last 10 lines of the file
head		<- display first 10 lines of the file
|		<- (pipe symbol)allows the output of commanmd infront to be input for command after

history		<- list all commands keyyed in before
!123		<- execute the command from history with code 123

	File access
chmod	<- change permissions for files
			Structure
chmod 			ugo=rwx 				file
change permission 	user group other = read write execute	filename

a	<- all users instead of setting ugo
= 	<- set permission
+	<- add permission
-	<- remove permission
-R	<- recursively
chown	<- change owner
chgrp	<- change group

	Data stream
stdout			<- standard output
stderr			<- standard error
stdin			<- standard input
>			<- print to file(will overwrite)
>>			<- append into the end of the file
2>			<- prints to file only if error occur
2>>			<- append to file if error occur
<			<- gets information from file to a string
set -o noclobber	<- makes files uanble to overwrite files that exist
>|			<- overwrites the noclobber option
1&2>			<- prints for both if command excutes and if error

	Data Manipulation
grep	<- get selected
	-v	<- output non match lines
	-c	<- output count of lines matched
	-i	<- ignore lower/upper case
	-n	<- outputs matched line number
cut	<-	<- splits result into sections
	-c	<- chracters in the section
	-d" "	<- delimiter by spaces
	-f2,3	<- select 2nd & 3rd field
	-f1-3	<- selects first to 3rd field
sort	<- sort in order
	-n	<- sort by numeric order
	-r	<- sort then display in reverse order
	-u	<- sort but only show unique entries
	-t" "	<- sets delimiter to blank spaces
uniq	<- unique data(require sort command before)
	-u	<- display unique lines only(discard duplicates)
	-d	<- display lines with 1 duplicate(no unique lines)
	-c	<- counts the number of duplicates

	Shell Script
#!/bin/bash	<- use bourne shell(required in first line ofall script)
read data	<- set variable data to input from console
if [ condition ]	...	then	...	else	...	then	...	fi	<- if statement
	-gt	<- greater than
	-lt	<- less than
	-ge	<- greater or equal
	-le	<- less or equal
	-eq	<- equals
	-ne	<- not equal
for condition in range	do	...	((increment condition))		done
while [ condition ]	do	...	((loop condition))		done
until [ condition ]	do	...	((loop condition))		done	<- always runs at least once
case condition in	"1") ...;;	"2") ...;;	* ...	esac
		Arrays
	declare -a arrayname=("1", "2" "3")
		-a	<- set as array
	for i in "${arrayname[0]}"	do	...	((increment condition))		done
